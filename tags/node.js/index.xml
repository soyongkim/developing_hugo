<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on SDPortfolio</title>
    <link>https://soyongkim.github.io/tags/node.js/</link>
    <description>Recent content in Node.js on SDPortfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://soyongkim.github.io/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>가시광 통신 기반 출결 관리 시스템 설계 및 구현</title>
      <link>https://soyongkim.github.io/publications/alldaydevops/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://soyongkim.github.io/publications/alldaydevops/</guid>
      <description>기존의 전자파를 사용하는 전자 출결 관리 시스템은 설치를 위해 많은 비용이 들거나 편의성 측면에서 불편한 점이 많고 부정 출석에 취약하다는 문제점이 있다. 이 논문에서는 가시광 통신을 기반으로 한 출결 관리 시스템을 통해 상기의 문제점들을 해결하고자 한다.
 Don’t mandate DevOps. Give employees the chance to master their discipline with examples to set and follow. Favor deep end-to-end accomplishments over broad but incremental steps forward. Focus on taking the right teams far before encouraging broad adoption.</description>
    </item>
    
    <item>
      <title>가시광 통신 서비스 서버 앱 개발</title>
      <link>https://soyongkim.github.io/projects/creations/vlc_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://soyongkim.github.io/projects/creations/vlc_server/</guid>
      <description>가시광 통신 서비스 서버 측 앱 개발 가시광 통신 서비스를 제공하기 위해 구성하였던 전체 장비들은 다음과 같으며, 각 장비들은 모두 KETI에서 개발한 oneM2M 사물인터넷 표준을 따르는 Mobius 플랫폼을 이용하여 개발하였습니다.
IoT Server와 VLC Agent 에서는 가시광 통신 서비스를 유저 요청에 따라 제공해주며, VLC Transmitter는 조명을 통해 IoT Server의 서비스 데이터를 전송하는 역할을 합니다. VLC Receiver는 가시광 데이터를 수신하여 서버가 제공하는 서비스를 제공받는 클라이언트 역할을 합니다. VLC Receiver의 경우 안드로이드 앱으로도 개발하였습니다.</description>
    </item>
    
  </channel>
</rss>